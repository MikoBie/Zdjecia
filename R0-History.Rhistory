group_by(Species) %>%
summarize(
M = mean(Sepal.Length),
w = 1 / (var(Sepal.Length) / n())
) %$%
{ sum(M * w) / sum(w) }
### Pakiet rozszerzonego wsparcia przetwarzani potokowego
library(magrittr)
### Agregacja wszystkich pozostałych zmiennych ilościowych
### w zakresach jednej zdyskretyzowanej zmiennej ilościowej
iris %>%
mutate(
Dyskretna = case_when(
Sepal.Length <= quantile(Sepal.Length, .25) ~ "Low",
Sepal.Length >= quantile(Sepal.Length, .75) ~ "High",
TRUE ~ "Mid"
)
) %>%
select(-Sepal.Length) %>%
group_by(Dyskretna) %>%
summarize_if(is.numeric, mean)
### Estymacja średniej populacyjnej z uwzględnieniem struktury grupowej
### (inverse variance weighting)
iris %>%
group_by(Species) %>%
summarize(
M = mean(Sepal.Length),
w = 1 / (var(Sepal.Length) / n())
) %$%
{
sum(M * w) / sum(w)
}
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species")
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species") %>%
slice(1, 60, 120)
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species") %>%
slice(c(1, 60, 120))
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species") %>%
slice(c(1:5, 51:55, 101:105))
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species") %>%
slice(c(1:2, 51:52, 101:102))
iris_tbl <- tbl_df(iris)
iris_tbl <- tbl_df(iris)
print(iris_tbl)
iris_tbl
sapply(iris, class)
lapply(iris, class)
sapply(iris, class)
lapply(iris, class)
sapply(iris, class)
tapply(iris$Petal.Length, iris$Species, summary)
?apply
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean) %>%
head
apply(iris[, 1:4], 1, mean) %>%
head
head(iris)
### Ramki danych wspierają wyłuskiwanie zmiennych za pomocą operatora '$'
### zwracany w takim przypadku jest wektor odpowiadający danej zmiennej.
head(iris$Sepal.Length)
### Kolumny (zmienne) mogą być również wybierane przy pomocy operatora
### dostępu do elementu listy '[['
head(iris[["Species"]])
### Warto zauważyć, że w tym przypadku można przekazywać nazwę zmiennej również
### jako zmienną
varname <- "Species"
head(iris[[varname]])
### Ramki danych, jako że są listami, są iterowalne,
### tj. można po nich przebiec np. pętlą `for`.
### W takim przypadku elementami iteracji są właśnie kolumny
for (i in iris) {
print(head(i))
}
### Można również łatwo samemu się przekonać, że ramki danych są listami.
### W tym celu można wykorzystać funkcję 'unclass'.
L <- unclass(iris)
L
### Jak widać, jest to rzeczywiście prosta lista wektorów z dodanym atrybutem ('row.names').
### Szczegółowe omówienie funkcji atrybutów zostawimy na kiedy indziej,
### ale w tym momencie wystarczy powiedzieć, że R przewidują możliwość,
### 'dodawania' arbitralnych metadanych do dowolnych obiektów,
### i do tego służą właśnie m.in. atrybuty.
### Dodatkowo instruujące może być pokazanie, jak łatwo można przekształcić otrzymaną listę
### z powrotem w ramkę danych. Wystarczy z przypisać jej odpowiednią klasę.
class(L) <- "data.frame"
head(L)
### Elementy można wybierać podając indeksy liczbowe
iris[5, 5]
### Jednocześnie zmienne można wybierać po nazwach (przekazując odpowiednie napisy)
iris[5, "Species"]
### Wiersze rówież mogą być indeksowane po nazwach
iris["5", "Species"]
x  <- c(1, 5, 6)     # indeksy wierszy
y1 <- c(1, 2)        # indeksy kolumn
y2 <- c("Sepal.Length", "Sepal.Width")
iris[x, y1]
iris[x, y2]
# Jeśli chcemy wybrać wszystkie elementy w jedny z wymiarów (wiersz lub kolumny)
# to możemy zostawić dane pole indeksowanie puste.
head(iris[ , "Species"])    # wszystkie rekordy dla zmiennej 'Species'
iris[1:5, ]                 # 5 pierwszych rekordów dla wszystkich zmiennych
### Wybór wszystkich elementów gatunku setosa oraz zmiennych 'Sepal.Legnth' i 'Sepal.Width'
iris[iris$Species == "setosa", c("Sepal.Length", "Sepal.Width")]
### Wybór wszystkich zmiennych, zaczynających się od 'Sepal'
iris[, grepl("^Sepal\\.", names(iris), perl = TRUE)]
library(dplyr)  # wczytanie pakietu
### Indeksowanie po numerach wierszy
slice(iris, 1:5)
### Indeksowanie po numerach kolumn
select(iris, 1:2)
### Indeskowanie kolumn po nazwach
select(iris, Sepal.Length, Species)
### Indeksowanie po zakresach nazw
select(iris, Sepal.Length:Petal.Length)
### Wykluczanie kolumn (indeksowanie negatywne)
select(iris, -Species)
### Wybór kolumn i wierszy
### Podejście niepotokowe
slice(select(iris, Sepal.Length:Sepal.Width), 1:10)
### Podejście potokowe
iris %>%
select(Sepal.Length:Sepal.Width) %>%
slice(1:10)
### Agregacja: obliczenie średnich i wariancji zmiennej 'Sepal.Legnth' w podziale na gatunki ('Species')
### Podejście naiwne, wykorzystujące tylko najbardziej podstawowe polecenie bazowego R
c(mean(iris[iris$Species == "setosa", "Sepal.Length"]), var(iris[iris$Species == "setosa", "Sepal.Length"]))
c(mean(iris[iris$Species == "virginica", "Sepal.Length"]), var(iris[iris$Species == "virginica", "Sepal.Length"]))
c(mean(iris[iris$Species == "versicolor", "Sepal.Length"]), var(iris[iris$Species == "versicolor", "Sepal.Length"]))
### Podejście wydajniejsze wykorzystujące funkcję 'tapply'
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, var)
### Podejeście jeszcze wydajniejsze wykorzystujące 'tapply' z tzw. funckją anonimową
tapply(iris$Sepal.Length, iris$Species, function(x) c(M = mean(x), VAR = var(x)))
### Podejście wykorzystujące wbudowaną funkcję aggregate
aggregate(iris$Sepal.Length, by = list(iris$Species), mean)
### Podejście pakietu dplyr bez przetwarzania potokowego
summarize(group_by(iris, Species), M = mean(Sepal.Length), VAR = var(Sepal.Length))
### Podejście pakietu dplyr z przetwarzaniem potokowym
iris %>%
group_by(Species) %>%
summarize(
M = mean(Sepal.Length),
VAR = var(Sepal.Length)
)
### Pakiet rozszerzonego wsparcia przetwarzani potokowego
library(magrittr)
### Agregacja wszystkich pozostałych zmiennych ilościowych
### w zakresach jednej zdyskretyzowanej zmiennej ilościowej
iris %>%
mutate(
Dyskretna = case_when(
Sepal.Length <= quantile(Sepal.Length, .25) ~ "Low",
Sepal.Length >= quantile(Sepal.Length, .75) ~ "High",
TRUE ~ "Mid"
)
) %>%
select(-Sepal.Length) %>%
group_by(Dyskretna) %>%
summarize_if(is.numeric, mean)
### Estymacja średniej populacyjnej z uwzględnieniem struktury grupowej
### (inverse variance weighting)
iris %>%
group_by(Species) %>%
summarize(
M = mean(Sepal.Length),
w = 1 / (var(Sepal.Length) / n())
) %$%
{
sum(M * w) / sum(w)
}
### Załóżmy, że dysponujemy dodatkowym zbiorem danych określającym (jakościowo)
### w jakiej temperaturze dokonywano pomiarów dla poszczególnych gatunków kwiatów
### w zbiorze iris.
iris_temp <- data.frame(
Species = c("setosa", "versicolor", "virginica"),
Temp = c("warm", "medium", "cold")
)
iris_temp
### Left join
left_join(iris, iris_temp, by = "Species") %>%
slice(c(1:2, 51:52, 101:102))
iris_tbl <- tbl_df(iris)
print(iris_tbl)
# Szybkie sprawdzenie typów zmiennych można zrobić również tak:
sapply(iris, class)
### Najbardziej podstawowym przedstawicielem rodziny 'apply' jest funkcja 'lapply'.
### Oczekuje ona obiekty podobnego do listy i dokonaniu określonej operacji na każdym jego elemencie
### zwraca wyniki również w postai listy
lapply(iris, class)
### Funkcja 'sapply' działa tak samo jak 'lapply', ale tam gdzie to możliwe stara się zwrócić
### dane w postaci uproszczonej (np. próbuje zwrócić prosty wektor zamiast listy).
sapply(iris, class)
### Ponadto jest również świetna funkcja 'tapply', która służy do wykonywania operacji
### na podzbiorach pewnej kolekcji (określanych na podstawie innej kolekcji).
### Pozwala ona na łatwe obliczenia w podgrupach.
tapply(iris$Petal.Length, iris$Species, summary)
### Godna uwagi jest również funkcja 'apply', która dostosowana jest do operacji
### na wielowymiarowych tablicach (takich jak ramki danych, macierze czy nawet uogólnione tablice).
### Jest ona w szczególności przydatna do liczenia wartości "po wierszach".
###
### Średnia z Sepal.Length, Sepal.Width, Petal.Length i Petal.Width dla pierwszych 6 obserwacji.
apply(iris[, 1:4], 1, mean) %>%
head
apply(1:10, 1, mean)
c(1, 1.5, 0, -2, 30)
c(1L, 10L, 11L)
c(2+3i, 101+17i)
c(TRUE, FALSE)
c("jeden napis", "drugi napis")
factor(c("czynnik I", "czynnik II"))
c(NA, NULL)
x <- c(FALSE, TRUE, NA)
names(x) <- !x
x <- c(TRUE, FALSE, NA)
m <- outer(x, x, FUN = "&")
colnames(m) <- x
rownames(m) <- x
m
x <- c(TRUE, FALSE, NA)
m <- outer(x, x, FUN = "|")
colnames(m) <- x
rownames(m) <- x
m
!FALSE          # Negacja
TRUE & FALSE    # Koniunkcja
TRUE | FALSE    # Dysjunkcja
# Porównania logiczne
1 == 1      # test równości
1 != 1      # test nierówności
1 > 1       # test 'większe od'
1 < 1       # test 'mniejsze od'
1 >= 1      # test 'większe od lub równe'
1 <= 1      # test 'mniejsze od lub równe'
# Tworzenie wektora, `c` to tzw. funkcja łącząca elementy
x <- c(1, 15, 100, 120, 7)
# Przykład zwektoryzowanej operacji.
x * 2
length(x)   # Długość wektora
x <- c(1, 15, 100, 120, 7)
for (i in 1:length(x)) {
x[i] <- x[i] * 2
}
x
letters[5:10]       # Ciąg od 5 do 10 litery alfabetu łacińskiego
# Przekazując ujemne indeksy można wykluczać poszczególne elementy
letters[-(5:10)]    # Alfabet bez ciągu liter od 5 do 10
# Indeksy dodatnie i ujemne nie mogą być jednak mieszane w jednej operacji indeksowania
# Można jednak obejść ten problem dzięki "składaniu" kolejnych indeksowań,
# wymaga to jednak odpowiedniego przeliczania indeksów np.
letters[5:10][-3]   # Ciąg od 5 do 10 litery alfabetu bez 7
# Najpierw stwórzmy czynnik
set.seed(303)
poziomy <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
czynnik <- factor(sample(poziomy, size = 10000, replace = TRUE), levels = poziomy)
head(czynnik, n = 6)   # wyświetla pierwsze 6 elementów
# Zdefiniujmy naszą 'lookup table'
lookup_table <- c(
A = "nowe A",
B = "nowe B",
C = "nowe C",
D = "nowe D",
E = "nowe E",
F = "nowe F",
G = "nowe G",
H = "nowe H",
I = "nowe I",
J = "nowe J"
)
# Teraz wykorzystamy indeksowanie po nazwach do stworzenia nowego zrekodowanego czynnika
nowy_czynnik <- unname(factor(lookup_table[czynnik], levels = lookup_table))
head(nowy_czynnik)  # wyświetla pierwsze 6 elementów
# Co więcej, w przypadku tak regularnej zmiany nazewnictwa jak powyższa
# całą operację można przeprowadzić jeszcze prościej,
# wykorzystując proste metody przetwarzania napisów.
#
# Zamiast definiować obiekt `lookup_table` ręcznie, możemy stworzyć go
# doklejając napis "nowe" do wyjściowych nazw czynników.
# Wykorzystamy do tego funkcję `paste` (dokumentacja: ?paste).
lookup_table2 <- paste("nowe", poziomy)
names(lookup_table2)
# Tablica nie ma jednak jeszcze nazw ...
lookup_table
# Dlatego trzeba je dodać określając dodatkowo atrybut `names`
names(lookup_table2) <- poziomy
lookup_table2
# Zauważmy, że obie tabele są teraz równoważne
identical(lookup_table, lookup_table2)
# Teraz można dokonać podstawienia tak, jak poprzednio
nowy_czynnik2 <- unname(factor(lookup_table2[czynnik], levels = lookup_table2))
# I tu też wynik jest równoważny do poprzedniego
identical(nowy_czynnik, nowy_czynnik2)
# Ten sam efekt można również osiągnąć stosując podejście oparte na ręcznym indeksowaniu
# i nadpisywaniu wartości. Jest ono jednak o wiele mniej wygodne. Zobaczmy, więc jak by to wyglądąło.
czynnik <- as.character(czynnik)
czynnik[czynnik == "A"] <- "nowe A"
czynnik[czynnik == "B"] <- "nowe B"
czynnik[czynnik == "C"] <- "nowe C"
czynnik[czynnik == "D"] <- "nowe D"
czynnik[czynnik == "E"] <- "nowe E"
czynnik[czynnik == "F"] <- "nowe F"
czynnik[czynnik == "G"] <- "nowe G"
czynnik[czynnik == "H"] <- "nowe H"
czynnik[czynnik == "I"] <- "nowe I"
czynnik[czynnik == "J"] <- "nowe J"
czynnik <- factor(czynnik, levels = lookup_table)
identical(czynnik, nowy_czynnik)
M <- matrix(1:9, ncol = 3, nrow = 3)    # tworzymy macierz
M
dim(M)  # wymiary macierzy
M*3     # operacje na macierzy również są zwektoryzowane
M %*% c(1, 0, 1)    # R wspiera również algebrę liniową (tu iloczyn macierzy i wektora)
# Przykładowa lista.
# Zauważny, że elementami list mogą być inne listy, a nawet ramka danych.
# Ponadto jednocześnie mogą występować obok siebie elementy z nazwami i bez nazw
# (choć zasadniczo dobrą praktyką jest albo nie korzystać z nazwa albo nazywać wszystkie elementy).
Lista <- list(1, a = 2, list(a = 2, b = 4), b = list(a = NULL, b = head(iris, n = 5)))
print(Lista)
# Listy są uporządkowane mogą być indeksowane liczbowo (niezależnie od występowania nazw)
Lista[2]
# Zauważmy, że poprzednia komenda nie zwróciła samej liczby,
# ale 1-elementową listę zawierającą w sobie liczbę.
#
# Jest to pokłosie rekursywności list. Każdy element list jest domyślnie traktowany
# jako osobna mini-lista.
# Do "wyłuskiwania" konkretnych wartości służy dodatkowy operator ekstrakcji "[["
Lista[[2]]      # Jak widać, tym razem wynikiem jest rzeczywiście sama liczba
# Ramki danych zawsze mają nazwane kolumnny
names(iris)
# oraz określoną liczbę wierszy
nrow(iris)
# Łatwo można podejrzeć n pierwszych wierszy
# (funkcja ta działa również na listach i wektorach)
head(iris, n = 10)
# oraz n ostatnich wierszy
tail(iris, n = 3)
# Zauważmy, że poza zmiennymi ilościowymi (4 pierwsze kolumny)
# jest tu również zmienna jakościowa ("Species")
# Łatwo można z ramki danych "wydobyć" konretną zmienną
head(iris$Species)
# Można to również zrobić używając indeksu liczbowego
head(iris[[5]])
# Jednak jedną z najważniejszych zalet ramek danych jest możliwość
# jednoczesnego indeksowania po wierszach i kolumnach
#
# Poniżej wydobywamy wszystkie pomiary "Sepal.Length" i "Sepal.Width"
# rekordów gatunku "versicolor".
iris[iris$Species == "versicolor", c("Sepal.Length", "Sepal.Width")]
# Jeżeli wskażemy pojedynczą zmienną zamiast dwóch, to zamiast ramki danych,
# rezultatem operacji będzie wektor.
iris[iris$Species == "virginica", "Petal.Length"]
# Jeśli chcemy wziąc wszystkie wiersza albo kolumny,
# to należy w odpowiednim miejscu zostawić przy indeksowaniu puste miejsce
#
# Wszystkie wiersza ale wybrane kolumny
iris[ , c("Sepal.Length", "Species")]
# Wszystkie kolumny ale wybrane wiersze
iris[1:4, ]
# Łatwo również "na szybko" podsumować ramkę danych
# (funkcja ta działa również na wektorach i innych typach obiektów, por. ?summary)
summary(iris)
library(haven)
D <- read_sav("~/Dropbox/Akademia/ISS/Analiza-Danych/Badanie 1 - wyniki (222wrz16).sav")
View(D)
write.csv(D, "tmp.csv")
write.csv(D, "tmp.csv", sep = ";", dec = ",")
?write.csv
write.csv(D, "tmp.csv", sep = ";", dec = ",")
x <- iris$Species
is.atomic(x)
rm(x)
iris
head(iris)
x <- iris$Species
x
levels(x)
x[1] <- "qwe"
x
levels(x)
as.numeric(x)
y <- as.character(x)
as.character(x) -> y
y
x[1] <- "qwe"
y[1] <- "qwe"
y
as.numeric(y)
NA * 20
L <- list(a = 1, b = 2)
L
L$a <- NULL
L
1/0
Inf * 20
Inf / 20
Inf * -1
sqrt(-2)
sqrt(2)
10 * "10"
x <- 1
x
1
x <- 1:10
x
1:10
x
x * 2
x * x
x %*% x
x * x
M <- matrix(1:9, nrow = 3)
M
M * M
M <- matrix(1:9, nrow = 3, byrow = TRUE)
M
x
x * 2
1:10 * :13
1:10 * 1:3
length(1)
length(1:10)
mean(1:10)
sum(1:10) / length(1:10)
x <- c(1, 15, 100, 120, 7)
x
x * 2
for (i in 1:length) x[i] <- x * 2
x
for (i in 1:length(x)) x[i] <- x * 2
x
x * 2
M
x <- c(1, 15, 100, 120, 7)
x
{
2
}
for (i in 1:length(x)) {
print(i)
}
x <- c(1, 15, 100, 120, 7)
for (i in x) {
print(i)
}
letters
letters[5:10]
5:10
letters[c(1, 6, 8, 2, 7)]
10:1
letters[length(letters):1]
savehistory("~/Dropbox/Akademia/ISS/Analiza-Danych/R0-History.Rhistory")
